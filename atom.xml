<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏日盐糖汽水</title>
  
  <subtitle>热爱生活,热爱技术</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-06T07:40:15.310Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Anorak</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 与 K8S 离线安装（Kubeadm方式）</title>
    <link href="http://example.com/2022/09/12/Docker%E4%B8%8EK8S%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88Kubeadm%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
    <id>http://example.com/2022/09/12/Docker%E4%B8%8EK8S%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88Kubeadm%E6%96%B9%E5%BC%8F%EF%BC%89/</id>
    <published>2022-09-11T16:05:18.000Z</published>
    <updated>2022-10-06T07:40:15.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-与-K8S-离线安装（Kubeadm方式）"><a href="#Docker-与-K8S-离线安装（Kubeadm方式）" class="headerlink" title="Docker 与 K8S 离线安装（Kubeadm方式）"></a>Docker 与 K8S 离线安装（Kubeadm方式）</h1><aside>💡 本次安装的版本是：Docker-20.10   K8S-1.23.8   Centos7.9</aside><p>由于工作中许多环境都是离线的服务器，所以自己在学习过程中用于记录。</p><p>软件包地址：阿里云盘</p><p>「K8S-1.23.8安装包与镜像」<a href="https://www.aliyundrive.com/s/ABZCZTsDSyT">https://www.aliyundrive.com/s/ABZCZTsDSyT</a><br>点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><ul><li>rpmPackage: K8S kubeadm、kubelet、kubectl 的安装包</li><li>dockerImages: K8S组件的docker镜像</li><li>calico：网络插件的docker镜像</li></ul><p>建议可以尝试自己下载软件包与镜像，这样成功感会更大，同时挑战也就更大。</p><p>致谢：</p><p>本文大部分的笔记都源自于学习该位UP主的视频，大伙儿可以点点关注啥的（非笔者）。</p><p><a href="https://space.bilibili.com/510305915/?spm_id_from=333.999.0.0">Linux-k8s开发的个人空间_哔哩哔哩_Bilibili</a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>服务器准备</li></ul><p>笔者前置环境是：使用vmWare初始化了两台Centos7.9的服务器，配置如下：</p><p>内存：4G<br>CPU：2核</p><p>配置静态IP：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网卡使用的是那个配置文件</span></span><br><span class="line"><span class="built_in">ls</span> /etc/sysconfig/network-scripts/ifcfg-*</span><br><span class="line">ip addr</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span> 改为：static</span><br><span class="line">ONBOOT=<span class="string">&quot;no&quot;</span> 改为：<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 追加配置</span></span><br><span class="line">IPADDR=192.168.101.251</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.101.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启网络:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>静态IP配置成功之后，DNS配置一般都会消失，所以这时候ping域名就没法ping通。需要配置DNS</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 添加配置文件</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure><p>保存后，DNS配置是立即生效的，只要本地需要解析缓存区没有的域名，就需要读取一般DNS配置，所以这个配置是立即生效的。</p><ul><li>K8S安装前初始化</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.设置主机名</span></span><br><span class="line">hostnamectl set-hostname master</span><br><span class="line">hostnamectl set-hostname node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.添加hosts解析</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">192.168.101.251 master</span></span><br><span class="line"><span class="string">192.168.101.252 node1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.同步时间</span></span><br><span class="line">yum -y install ntp</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd --now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.永久关闭seLinux（需要重启系统生效）</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.永久关闭swap（需要重启系统生效）</span></span><br><span class="line">swapoff -a  <span class="comment"># 临时关闭</span></span><br><span class="line">sed -i <span class="string">&#x27;s/.*swap.*/#&amp;/g&#x27;</span> /etc/fstab <span class="comment"># 永久关闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.升级内核为5.4版本（需要重启系统生效）</span></span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-5.el7.elrepo.noarch.rpm</span><br><span class="line">yum --enablerepo=elrepo-kernel install -y kernel-lt</span><br><span class="line">grub2-set-default 0</span><br><span class="line">reboot <span class="comment">#这里先重启再继续</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.关闭防火墙、清空iptables规则</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span><br><span class="line">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X &amp;&amp; iptables -P FORWARD ACCEPT &amp;&amp; service iptables save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.加载IPVS</span></span><br><span class="line">yum -y install ipset ipvsadm</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">modprobe -- ip_vs</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_rr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_wrr</span></span><br><span class="line"><span class="string">modprobe -- ip_vs_sh</span></span><br><span class="line"><span class="string">modprobe -- nf_conntrack</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">modprobe -- nf_conntrack</span><br><span class="line"><span class="built_in">chmod</span> 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.开启br_netfilter</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/containerd.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">modprobe overlay</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables  = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward                 = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure><h3 id="安装Docker离线"><a href="#安装Docker离线" class="headerlink" title="安装Docker离线"></a>安装Docker离线</h3><p><a href="https://download.docker.com/linux/static/stable/x86_64/">Index of linux&#x2F;static&#x2F;stable&#x2F;x86_64&#x2F;</a></p><ol><li>首先，访问上述地址，通过能访问外网的电脑下载软件包。通过scp 或则 ftp 上传到服务器上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例：scp</span></span><br><span class="line"><span class="comment"># 默认22 端口</span></span><br><span class="line">scp &lt;docker file &gt;  &lt;remoteUser&gt;@&lt;remoteIP&gt;:&lt;remotePath&gt;</span><br><span class="line"><span class="comment"># 指定ssh端口（一般都是默认22端口，若您修改了ssh端口则需要指定，下面示例：23端口）</span></span><br><span class="line"><span class="comment"># -P(大写)</span></span><br><span class="line">scp -P 23 docker-20.10.0.tgz root@192.168.101.252:/home/admin </span><br><span class="line"><span class="comment"># 默认22 端口</span></span><br><span class="line">scp docker-20.10.0.tgz root@192.168.101.252:/home/admin</span><br></pre></td></tr></table></figure><ol start="2"><li>解压</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf docker-20.10.0.tgz</span><br></pre></td></tr></table></figure><ol start="3"><li>将解压出来的Docker文件复制到&#x2F;usr&#x2F;bin目录下</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> docker/* /usr/bin/</span><br></pre></td></tr></table></figure><ol start="4"><li>创建docker.service文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure><ol start="5"><li>修改配置文件</li></ol><p>将 <code>--insecure-registry=192.168.101.252</code>  修改为自己的ip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --selinux-enabled=<span class="literal">false</span> --insecure-registry=192.168.101.252</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="comment">#TasksMax=infinity</span></span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line">KillMode=process</span><br><span class="line"><span class="comment"># restart the docker process if it exits prematurely</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ol start="6"><li>给docker.service 添加权限</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 755 /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure><ol start="7"><li>重新加载配置文件、启动、设置开机自启动</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置文件 每次修改了docker.service都要重新加载一下</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># systemctl enable docker.service</span></span><br></pre></td></tr></table></figure><ol start="8"><li>查看docker状态</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>下图</p><p><img src="/2022/09/12/Docker%E4%B8%8EK8S%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88Kubeadm%E6%96%B9%E5%BC%8F%EF%BC%89/1-16629132599041.png"></p><ol start="9"><li>配置docker镜像地址</li></ol><p><code>exec-opts</code>：一定要加，否则K8S会报错。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://uleyvyb3.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line"><span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line"><span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line"><span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;storage-opts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;overlay2.override_kernel_check=true&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;                                                                                                                                                                                                                                         </span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>aliyun镜像：由于阿里云的docker镜像都是个人的，所以自己登陆aliyun复制下来即可</p><p>管控台：搜索→容器镜像服务</p><p><img src="/2022/09/12/Docker%E4%B8%8EK8S%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88Kubeadm%E6%96%B9%E5%BC%8F%EF%BC%89/image-20220912002246090.png" alt="2"></p><ol start="10"><li>设置开机启动</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="安装k8s（kubeadm-1-23-8、kubelet-1-23-8、kubectl-1-23-8）"><a href="#安装k8s（kubeadm-1-23-8、kubelet-1-23-8、kubectl-1-23-8）" class="headerlink" title="安装k8s（kubeadm-1.23.8、kubelet-1.23.8、kubectl-1.23.8）"></a>安装k8s（kubeadm-1.23.8、kubelet-1.23.8、kubectl-1.23.8）</h3><ol><li>准备安装包</li></ol><p>由于是离线的服务器，所以需要提前准备安装包。</p><p>使用一台能访问外网的Centos服务器下载软件包，或则使用作者提供的软件包</p><p>（在每台服务器都需要 安装：kubeadm、kubelet、kubectl）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install --downloadonly --downloaddir=<span class="variable">$PWD</span> kubeadm-1.23.8-0 kubelet-1.23.8-0 kubectl-1.23.8-0</span><br></pre></td></tr></table></figure><p>scp 或 ftp上传软件包</p><ol start="2"><li>添加源</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.tuna.tsinghua.edu.cn/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在软件包的目录下</span></span><br><span class="line">rpm -ivh *.rpm --nodeps --force</span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">yum list installed |grep kube</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化集群</li></ol><ul><li>准备镜像</li></ul><p>需要一台安装了kubeadm的服务器来拉镜像，或者使用作者提供的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/kubeadm_init &amp;&amp; <span class="built_in">cd</span> ~/kubeadm_init</span><br><span class="line"></span><br><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-init.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; kubeadm-init.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="string">bootstrapTokens:</span></span><br><span class="line"><span class="string">- groups:</span></span><br><span class="line"><span class="string">  - system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="string">  token: abcdef.0123456789abcdef</span></span><br><span class="line"><span class="string">  ttl: 24h0m0s</span></span><br><span class="line"><span class="string">  usages:</span></span><br><span class="line"><span class="string">  - signing</span></span><br><span class="line"><span class="string">  - authentication</span></span><br><span class="line"><span class="string">kind: InitConfiguration</span></span><br><span class="line"><span class="string">localAPIEndpoint:</span></span><br><span class="line"><span class="string">  advertiseAddress: 192.168.1.201 #修改自己的ip</span></span><br><span class="line"><span class="string">  bindPort: 6443</span></span><br><span class="line"><span class="string">nodeRegistration:</span></span><br><span class="line"><span class="string">  criSocket: /var/run/dockershim.sock</span></span><br><span class="line"><span class="string">  name: master</span></span><br><span class="line"><span class="string">  taints:</span></span><br><span class="line"><span class="string">  - effect: &quot;NoSchedule&quot;</span></span><br><span class="line"><span class="string">    key: &quot;node-role.kubernetes.io/master&quot;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiServer:</span></span><br><span class="line"><span class="string">  timeoutForControlPlane: 4m0s</span></span><br><span class="line"><span class="string">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="string">certificatesDir: /etc/kubernetes/pki</span></span><br><span class="line"><span class="string">clusterName: kubernetes</span></span><br><span class="line"><span class="string">controllerManager: &#123;&#125;</span></span><br><span class="line"><span class="string">dns:</span></span><br><span class="line"><span class="string">  type: CoreDNS</span></span><br><span class="line"><span class="string">etcd:</span></span><br><span class="line"><span class="string">  local:</span></span><br><span class="line"><span class="string">    dataDir: /var/lib/etcd</span></span><br><span class="line"><span class="string">imageRepository: registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="string">kind: ClusterConfiguration</span></span><br><span class="line"><span class="string">kubernetesVersion: v1.23.8</span></span><br><span class="line"><span class="string">networking:</span></span><br><span class="line"><span class="string">  dnsDomain: cluster.local</span></span><br><span class="line"><span class="string">  serviceSubnet: 10.96.0.0/12</span></span><br><span class="line"><span class="string">  podSubnet: 10.244.0.0/16  </span></span><br><span class="line"><span class="string">scheduler: &#123;&#125;</span></span><br><span class="line"><span class="string">--- </span></span><br><span class="line"><span class="string">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="string">kind: KubeProxyConfiguration </span></span><br><span class="line"><span class="string">mode: ipvs </span></span><br><span class="line"><span class="string">--- </span></span><br><span class="line"><span class="string">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="string">kind: KubeletConfiguration </span></span><br><span class="line"><span class="string">cgroupDriver: systemd</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预拉取镜像</span></span><br><span class="line">kubeadm config images pull --config kubeadm-init.yaml</span><br></pre></td></tr></table></figure><p>镜像拉取完成之后能看到下面七个镜像，那么本地存在镜像了，就需要打包出来上传到离线的服务器上。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver            v1.23.8                  09d62ad3189b   2 months ago    135MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager   v1.23.8                  2b7c5a039984   2 months ago    125MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler            v1.23.8                  afd180ec7435   2 months ago    53.5MB</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy                v1.23.8                  db4da8720bcb   2 months ago    112MB</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd                      3.5.1-0                  25f8c7f3da61   10 months ago   293MB</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns                   v1.8.6                   a4ca41631cc7   11 months ago   46.8MB</span><br><span class="line">registry.aliyuncs.com/google_containers/pause                     3.6                      6270bb605e12   12 months ago   683kB</span><br></pre></td></tr></table></figure><p>打包镜像</p><p>共需要打包七份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例 注意:打包的tar包，前面不能带镜像仓库和命令空间，会被误以为是目录，例如：</span></span><br><span class="line"><span class="comment"># 错误：registry.aliyuncs.com/google_containers/kube-apiserver.tar</span></span><br><span class="line"><span class="comment"># 正确：kube-apiserver.tar</span></span><br><span class="line">docker save -o kube-apiserver.tar registry.aliyuncs.com/google_containers/kube-apiserver:v1.23.8</span><br></pre></td></tr></table></figure><p>导入镜像</p><p>通过scp或则ftp上传到服务器之后，需要导入到docker中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">docker load &lt; etcd.tar</span><br></pre></td></tr></table></figure><p><img src="/2022/09/12/Docker%E4%B8%8EK8S%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%EF%BC%88Kubeadm%E6%96%B9%E5%BC%8F%EF%BC%89/image-20220912002224616.png" alt="3"></p><ul><li>初始化</li></ul><p>将上述七个镜像都导入到离线服务器上之后，再离线安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --config=kubeadm-init.yaml | <span class="built_in">tee</span> kubeadm-init.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若其他节点也需要kubectl的支持，就需要将配置文件复制过去</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><ol start="5"><li>安装k8s集群网络</li></ol><p>还是需要提前下载yaml文件与镜像</p><p><code>yaml：</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class="line"></span><br><span class="line">1 修改CIDR</span><br><span class="line">- name: CALICO_IPV4POOL_CIDR</span><br><span class="line">  value: <span class="string">&quot;10.244.0.0/16&quot;</span></span><br><span class="line">2 指定网卡</span><br><span class="line"><span class="comment"># Cluster type to identify the deployment type</span></span><br><span class="line">  - name: CLUSTER_TYPE</span><br><span class="line">  value: <span class="string">&quot;k8s,bgp&quot;</span></span><br><span class="line"><span class="comment"># 下面添加</span></span><br><span class="line">  - name: IP_AUTODETECTION_METHOD</span><br><span class="line">    value: <span class="string">&quot;interface=ens33&quot;</span></span><br><span class="line">    <span class="comment"># ens33为本地网卡名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不指定网卡</span></span><br><span class="line"><span class="comment">#创建pod时会有如下报错</span></span><br><span class="line"><span class="comment">#创建pod时报Failed create pod sandbox</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>镜像：</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">calico/kube-controllers                                           v3.24.0   d4d0783ac017   3 weeks ago     71.3MB</span><br><span class="line">calico/cni                                                        v3.24.0   45f84749206f   3 weeks ago     197MB</span><br><span class="line">calico/node                                                       v3.24.0   c595bc026ccf   3 weeks ago     220MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">docker save -o kube-controllers.tar calico/kube-controllers:v3.24.0</span><br><span class="line">docker load &lt; kube-controllers.tar</span><br></pre></td></tr></table></figure><p><code>apply:</code></p><p>将上述三个镜像都导入到离线服务上之后，再执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apply</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><ol start="6"><li>node节点加入k8s集群</li></ol><p>node节点也需要安装kubeadm、kubelet、kubectl</p><p>kubeadm join 可以直接在步骤4-初始化执行完的终端上看到提示，也可以看日志文件&lt;kubeadm-init.log&gt;</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim kubeadm-init.log</span><br><span class="line"><span class="comment"># 按下 G  ps:在vim快捷键中，大写 G 是跳转到vim的底部，双小写 gg 是到vim的顶部</span></span><br><span class="line"><span class="comment">#就可以看到 一堆kubeadm join ..................复制到node节点上执行即可。</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> ................</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-与-K8S-离线安装（Kubeadm方式）&quot;&gt;&lt;a href=&quot;#Docker-与-K8S-离线安装（Kubeadm方式）&quot; class=&quot;headerlink&quot; title=&quot;Docker 与 K8S 离线安装（Kubeadm方式）&quot;&gt;&lt;/a&gt;Do</summary>
      
    
    
    
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch7.16.2版本安装hanlp插件</title>
    <link href="http://example.com/2022/09/03/elasticSearch7.26/"/>
    <id>http://example.com/2022/09/03/elasticSearch7.26/</id>
    <published>2022-09-03T05:19:21.151Z</published>
    <updated>2022-09-03T07:48:28.852Z</updated>
    
    <content type="html"><![CDATA[<p>💡 本教程仅用于记录，若写的不好，请多多包涵！ </p><p>我在工作中，需要安装Hanlp插件。ElasticSearch的版本为：7.16.2 </p><p>经过我一番Google之后，发现市面上的教程大多集中在ElasticSearch版本7.15以下，并没有我所需要的7.16.2的版本，大伙儿都知道，ES插件需要和ES 版本一致才能安装。 而：大多教程都是叫自己 拉代码然后自行编译。 而我经过多次尝试：最终都被 版本跨度、和JDK11才能编译 等等一些列问题给劝退了! 那不无解了？ </p><p>🤺🤺🤺 退！退！退！</p><p>🤺🤺🤺 退！退！退！ </p><p>经过同事的漫长寻找最后找到了一位大佬遗留的秘籍。那么大伙儿就随我一起来观摩观摩这本秘籍吧！ </p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>原地址： <a href="https://github.com/muxiaobai/elasticsearch-analysis-hanlp/releases/tag/v7.16.2">https://github.com/muxiaobai/elasticsearch-analysis-hanlp/releases/tag/v7.16.2</a> </p><p><img src="/2022/09/03/elasticSearch7.26/1.png"></p><p> <code>终于在大佬的一番话语中，探明了前进的方向</code></p><p> 虽说这位大佬提供了jar包，但是仍然需要自己替换zip包。 </p><p>所以我找到其他的zip 下载地址： <a href="https://github.com/KennFalcon/elasticsearch-analysis-hanlp/releases">Releases · KennFalcon&#x2F;elasticsearch-analysis-hanlp</a>  </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>我们将zip与jar包下载好之后 </p><ol><li>替换jar包。并删除原版本 将7.10.0版本的zip解压，然后将7.16.2版本的jar包替换进去，删除原7.10.0的jar包</li></ol><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200849914-16621905055872.png" alt="image-20220717200849914"></p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200858007.png" alt="image-20220717200858007"></p><ol start="2"><li>修改配置</li></ol><p>​如图：打开plugin-descriptor.properties 文件 修改对于的两个version为我们替换进去的jar版本 </p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200907763.png" alt="image-20220717200907763"></p><p>重新打包成zip包，并修改文件名。</p><p> <code>ps：这里一定要注意：需要在打包前就将文件夹的名称版本改好，在进行打包成zip</code> </p><p>3.<code>修改另一个配置</code>（重要点！)</p><p> 我在测试与实际安装过程中，遇到过好几次这种问题。报错信息请看下图，这里我并没有深究：这里是权限的配置。我开放了所有权限，请大伙儿这里需要注意。 但是若使用原配置启动不了。</p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200619740.png" alt="image-20220717200619740"></p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">permission java.net.SocketPermission &quot;*&quot;, &quot;connect,resolve&quot;;</span><br><span class="line">permission java.io.FilePermission &quot;-&quot;,&quot;read&quot;;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200501138.png" alt="image-20220717200501138"> </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我们使用Docker-compose进行安装。若不会docker-compose的同学需要自行学习一下。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.16.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.enabled=true</span> <span class="comment">#设置允许跨域</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http.cors.allow-origin=*</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span>   <span class="comment"># 内存交换的选项，官网建议为true</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">TAKE_FILE_OWNERSHIP=true</span>   <span class="comment"># 权限问题</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/docker/elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/docker/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br></pre></td></tr></table></figure><p>docker-compose启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker-compose启动</span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200521619.png" alt="image-20220717200521619"></p><p> <code>拉取docker镜像中</code> </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose logs -f </span><br></pre></td></tr></table></figure><p>查看启动日志<img src="https://an-opq.github.io/2022/07/17/ElasticSearch7-16-2%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85hanlp%E6%8F%92%E4%BB%B6/image-20220717200535312.png" alt="image-20220717200535312"> <code>日志也正常启动</code> 访问： <a href="http://xxxx:9200/">http://xxxx:9200</a> </p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200548881.png" alt="image-20220717200548881"></p><p> 可以正常访问 </p><hr><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>那么就来安装hanlp插件吧！</p><ol><li><p>上传修改好的插件到服务器中 <img src="/2022/09/03/elasticSearch7.26/image-20220717200558087.png" alt="image-20220717200558087"> </p></li><li><p>复制到docker容器内部</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ./elasticsearch-analysis-hanlp-7.16.2.zip elasticsearch:/usr/share/elasticsearch</span><br></pre></td></tr></table></figure><ol start="3"><li>进入容器内部 <img src="https://an-opq.github.io/2022/07/17/ElasticSearch7-16-2%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85hanlp%E6%8F%92%E4%BB%B6/image-20220717200608440.png" alt="image-20220717200608440"></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it elasticsearch bash </span><br></pre></td></tr></table></figure><ol start="4"><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install file:///usr/share/elasticsearch/elasticsearch-analysis-hanlp-7.16.2.zip</span><br></pre></td></tr></table></figure><ol start="5"><li>安装成功</li></ol><p>由于我权限开放较大，所以会有警告</p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200628153.png" alt="image-20220717200628153"></p><ol start="6"><li>重启Docker容器</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从容器中退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><ol start="7"><li>测试</li></ol><p>从原理来说：由于ES小版本之间的区别不大，所以按理说 7.16.x 之后的版本 之后改动不大，都可以按照上述方法改。</p><p><img src="/2022/09/03/elasticSearch7.26/image-20220717200640068.png" alt="image-20220717200640068"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;💡 本教程仅用于记录，若写的不好，请多多包涵！ &lt;/p&gt;
&lt;p&gt;我在工作中，需要安装Hanlp插件。ElasticSearch的版本为：7.16.2 &lt;/p&gt;
&lt;p&gt;经过我一番Google之后，发现市面上的教程大多集中在ElasticSearch版本7.15以下，并没有我</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
